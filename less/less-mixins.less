/*
 * LESS-MIXINS v0.1
 * http://socialfactory.se/
 *
 * Copyright 2012, Peter Elmered
 * Free to use under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 *
 * TouchWipe gesture credits: http://www.netcu.de/jquery-touchwipe-iphone-ipad-library
 */


/**
 * INDEX
 * 
 * CLEARFIX
 * WRAP
 * PRE
 * HIDE-TEXT (CSS image replacement)
 * TEXT ALIGN SHORTCUTS
 * MARGIN SHORTCUTS
 * MARGIN - H / V
 * PADDING SHORTCUTS
 * PADDING - H / V
 * SIZING, BOXING and MASKING
 * MASKING
 * POSITIONING
 * BORDER-RADIUS
 * BOX-SHADOW
 * TEXT-SHADOW
 * GRADIENT
 * ROTATE
 * SPRITES
 * VERTICAL STATES SPRITE
 * HORIZONTAL STATES SPRITE
 * INLINE LIST
 * UNSELECTABLE
 * USER-SELECT
 * 
 */
 
 
 
/**
 * TODO:
 * 
 * More default values(and use them more)
 * Add a lot more mixins
 * Sort mixins in a logical order. Alphabetical or categorized/gouped(and separated into multiple files?)? - Give me feedback on this one
 * Better demopage and documentation
 * 
 * 
 * Please fork and/or make a pull request!
 */



@import "less/vars.less"; /* Default values - Change them to fit your project */

 
.font-size(@fontSize: @baseFontSize) {
   font-size: ~"@{fontSize}px";
   font-size: @fontSize/10rem;
}


/**
 * CLEARFIX
 * (from TwitterBootstrap)
 */
.clearfix, .clr {
	
	*zoom: 1;
	
	&:before, &:after {
		display: table;
		content: "";
	}
	
	&:after {
		clear: both;
	}
	
}

.wrap {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}
.pre {
  text-wrap: wrap;
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  word-wrap: break-word;
}

/**
 * CSS image replacement
 * (from TwitterBootstrap)
 *
 * I removed the border and background rule to allow element define it's own rules!
 */
.hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
}











/**
 * TEXT ALIGN SHORTCUTS
 * these rules are simple quick shortcuts to the "text-align" CSS property
 */
.ta( @align:left ) { text-align: @align }
.tl { .ta( left ) }
.tr { .ta( right ) }
.tc { .ta( center ) }
.tj { .ta( justify ) }







/**
 * MARGIN SHORTCUTS
 * these are shortcuts to the margin-{side} CSS property
 */
.mt ( @value:0 ) { margin-top: 		@value }
.mr ( @value:0 ) { margin-right: 	@value }
.mb ( @value:0 ) { margin-bottom: 	@value }
.ml ( @value:0 ) { margin-left: 	@value }

/**
 * MARGIN - H / V
 * these are shortcuts to set only horizontals or vertical margins without alter existing rules
 * you can use these mixins with one value applied to the left/right, top/bottom margins or
 * you can use them with separated values
 */
.mv( @value:0 ) { 			.mt(@value); 	.mb(@value); }
.mv( @v1, @v2 ) { 			.mt(@v1); 		.mb(@v2); }

.mh( @value:0 ) { 			.ml(@value); 	.mr(@value); }
.mh( @v1, @v2 ) { 			.ml(@v1); 		.mr(@v2); }






/**
 * PADDING SHORTCUTS
 * these are shortcuts to the padding-{side} CSS property
 */
.pt ( @value:0 ) { padding-top: 	@value }
.pr ( @value:0 ) { padding-right: 	@value }
.pb ( @value:0 ) { padding-bottom: 	@value }
.pl ( @value:0 ) { padding-left: 	@value }

/**
 * PADDING - H / V
 * these are shortcuts to set only horizontals or vertical paddings without alter existing rules
 * you can use these mixins with one value applied to the left/right, top/bottom paddings or
 * you can use them with separated values
 */
.pv( @value:0 ) { 			.pt(@value); 	.pb(@value); }
.pv( @v1, @v2 ) { 			.pt(@v1); 		.pb(@v2); }

.ph( @value:0 ) { 			.pl(@value); 	.pr(@value); }
.ph( @v1, @v2 ) { 			.pl(@v1); 		.pr(@v2); }







/**
 * SIZING, BOXING and MASKING
 */

/* size is inpired by the TwitterBootstrap mixin for arguments order. */
/* this is a compatibility decision but I don't uderstand why to start with height!!! Why Twitter? Why? */
.size( @h ) { 				height: @h }
.size( null, @w ) { 		width: @w }
.size( @h, @w ) { 			width: @w; height: @h }

.block {					display:block }
.block( @w ) {				.block; .size(null,@w) }
.block( null, @h ) {		.block; .size(@h) }
.block( @w, @h ) {			.block; .size(@h,@w) }

/* inline-block backwards compatibilty hack */
.inline-block {
	display:				-moz-inline-stack;
	display:				inline-block;
	zoom:					1;
	*display:				inline;
}

.inline-block( @w ) {		.inline-block; .size(null,@w) }
.inline-block( null, @h ) {	.inline-block; .size(@h) }
.inline-block( @w, @h ) {	.inline-block; .size(@h,@w) }

/* inline-block shortcuts */
.iblock {					.inline-block }
.iblock( @w ) {				.inline-block(@w) }
.iblock( null, @h ) {		.inline-block(null,@h) }
.iblock( @w, @h ) {			.inline-block(@w,@h) }







/**
 * MASKING
 */

.mask {						.block;					overflow: hidden }
.mask( @w ) {				.block(@w); 			.mask }
.mask( null, @h ) {			.block(null,@h); 		.mask }
.mask( @w, @h ) {			.block(@w,@h); 			.mask }

.inline-mask {				.inline-block;			overflow: hidden }
.inline-mask( @w ) {		.inline-block(@w);		.inline-mask }
.inline-mask( null, @h ) {	.inline-block(null,@h);	.inline-mask }
.inline-mask( @w, @h ) {	.inline-block(@w,@h); 	.inline-mask }

.imask {					.inline-mask }
.imask( @w ) {				.inline-mask(@w) }
.imask( null, @h ) {		.inline-mask(null,@h) }
.imask( @w, @h ) {			.inline-mask(@w,@h) }







/**
 * POSITIONING
 */

.rel {						position: relative }

.abs {						position:absolute; 	top:0; 		left:0 		}
.abs( @v ) {				.abs; 				top:@v 					}
.abs( null, @h ) {			.abs; 				left:@h 				}
.abs( @v, @h ) {			.abs;				top:@v; 	left:@h 	}

.abs-r {					position:absolute; 	top:0; 		right:0 	}
.abs-r( @v ) {				.abs-r; 			top:@v 					}
.abs-r( null, @h ) {		.abs-r; 			right:@h 				}
.abs-r( @v, @h ) {			.abs-r;				top:@v; 	right:@h 	}

.abs-b {					position:absolute; 	bottom:0; 	left:0 		}
.abs-b( @v ) {				.abs-b; 			bottom:@v 				}
.abs-b( null, @h ) {		.abs-b; 			left:@h 				}
.abs-b( @v, @h ) {			.abs-b;				bottom:@v; 	left:@h 	}

.abs-br {					position:absolute; 	bottom:0; 	right:0 	}
.abs-br( @v ) {				.abs-br; 			bottom:@v 				}
.abs-br( null, @h ) {		.abs-br; 			right:@h 				}
.abs-br( @v, @h ) {			.abs-br;			bottom:@v; 	right:@h 	}












/**
 * CSS3 - Border Radius
 */

/* single border radius applied to all corners */
.border-radius(@r) {
	-webkit-border-radius:					@r;
	-moz-border-radius: 					@r;
	border-radius: 							@r;
}

/* two values applied tob/bottom then bottom/top */
.border-radius( @rt, @rb ) {
	-webkit-border-radius: 					@rt;
	-webkit-border-bottom-right-radius: 	@rb;
	-webkit-border-bottom-left-radius: 		@rb;
	-moz-border-radius: 					@rt;
	-moz-border-radius-bottomright: 		@rb;
	-moz-border-radius-bottomleft: 			@rb;
	border-radius: 							@rt;
	border-bottom-right-radius: 			@rb;
	border-bottom-left-radius: 				@rb;
}
.border-radius( @rt, @rb, tb ) {			.border-radius(@rt,@rb) }
.border-radius( @rt, @rb, bt ) {			.border-radius(@rb,@rt) }


/* two values - left/right right/left */
.border-radius( @rl, @rr, lr ) {
	-webkit-border-radius: 					@rl;
	-webkit-border-top-right-radius: 		@rr;
	-webkit-border-bottom-right-radius: 	@rr;
	-moz-border-radius: 					@rl;
	-moz-border-radius-topright: 			@rr;
	-moz-border-radius-bottomright: 		@rr;
	border-radius: 							@rl;
	border-top-right-radius: 				@rr;
	border-bottom-right-radius: 			@rr;
}
.border-radius( @rl, @rr, rl ) {			.border-radius(@rr,@rl,lr) }


/* two values - topLeft/bottomRight topRight/bottomLeft */
.border-radius( @r1, @r2, tlbr ) {
	-webkit-border-radius: 					@r1;
	-webkit-border-top-right-radius: 		@r2;
	-webkit-border-bottom-left-radius: 		@r2;
	-moz-border-radius: 					@r1;
	-moz-border-radius-topright: 			@r2;
	-moz-border-radius-bottomleft: 			@r2;
	border-radius: 							@r1;
	border-top-right-radius: 				@r2;
	border-bottom-left-radius: 				@r2;
}
.border-radius( @r1, @r2, trbl ) {			.border-radius(@r2,@r1,tlbr) }
.border-radius( @r, tlbr ) {				.border-radius(@r,0,tlbr) }
.border-radius( @r, trbl ) {				.border-radius(0,@r,tlbr) }


/* two values - top borders */
.border-radius( @r, top ) {					.border-radius(@r,0) 				}
.border-radius( @r, t ) {					.border-radius(@r,top) 				}
.border-radius( @r, bottom ) {				.border-radius(@r,0,bt) 			}
.border-radius( @r, b ) {					.border-radius(@r,bottom) 			}
.border-radius( @r, left ) {				.border-radius(@r,0,lr) 			}
.border-radius( @r, l ) {					.border-radius(@r,left) 			}
.border-radius( @r, right ) {				.border-radius(@r,0,rl) 			}
.border-radius( @r, r ) {					.border-radius(@r,right) 			}


/* border-radius different for every corner */
.border-radius( @r1, @r2, @r3, @r4 ) {
	-webkit-border-top-left-radius: 		@r1;
	-webkit-border-top-right-radius: 		@r2;
	-webkit-border-bottom-right-radius: 	@r3;
	-webkit-border-bottom-left-radius: 		@r4;
	-moz-border-radius-topleft: 			@r1;
	-moz-border-radius-topright: 			@r2;
	-moz-border-radius-bottomright: 		@r3;
	-moz-border-radius-bottomleft: 			@r4;
	border-top-left-radius: 				@r1;
	border-top-right-radius: 				@r2;
	border-bottom-right-radius: 			@r3;
	border-bottom-left-radius: 				@r4;
	
}




/**
 * BOX-SHADOW
 * 
 * USAGE: .box-shadow(0px 6px 15px 4px rgba(0, 0, 0, 0.15));
 */
.box-shadow ( @arg )
{
   -moz-box-shadow: @arg;
   -webkit-box-shadow: @arg;
   box-shadow: @arg;
}
.box-shadow (@x: 0, @y: 0, @blur: 1px, @s: 0, @color: #000) {
   -moz-box-shadow: @arguments;
   -webkit-box-shadow: @arguments;
   box-shadow: @arguments;
}

/**
 * TEXT-SHADOW
 * 
 * 
 */
.text-shadow (@x: 1px, @y: 1px, @blur: 2px, @color: #757575) {
   text-shadow: @x @y @blur @color;
   filter: dropshadow(color=@color, offx=@x, offy=@y);
}



/**
 * GRADIENT
 * 
 * 
 */
.gradient (@from: #f7f7f7, @to: #e0e0e0, @fallback: @backgroundFallback) {
  background-color: @fallback; /* fallback */
  background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(@from), to(@to)); /* Safari 4-5, Chrome 1-9 */
  background: -webkit-linear-gradient(top, @to, @from); /* Safari 5.1, Chrome 10+ */
  background: -moz-linear-gradient(top, @to,@from); /* Firefox 3.6+ */
  background: -ms-linear-gradient(top, @to, @from); /* IE 10 */
  background: -o-linear-gradient(top, @to, @from); /* Opera 11.10+ */
}


/**
 * ROTATE
 * 
 * 
 */
.rotate(@rotation: @baseRotation) {
   /* Webkit - Chrome, Safari... */
   -webkit-transform: rotate(@rotation);
   /* Firefox */
   -moz-transform: rotate(@rotation);	
   /* Opera */
   -o-transform:rotate(@rotation);
   /* IE 8+ */
   -ms-transform:rotate(@rotation);
   /* IE 7- Inacurate / Not reliable 
   0 : Default. Content is not rotated.
   1 : Content is rotated 90 degrees.
   2 : Content is rotated 180 degrees.
   3 : Content is rotated 270 degrees.
   */
   filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=(@rotation/90));
}




/**
 * SPRITES
 */

.sprite-pos {				background-position: 0 0 			}
.sprite-pos( @x, @y ) {		background-position: -@x -@y		}
.sprite-pos( @x ) {			.sprite-pos(@x,0)					}
.sprite-pos( null, @y ) {	.sprite-pos(@0,y)					}


.sprite( @img, @w, @h, @x, @y ) {
	
	.mask(@w,@h);
	
	.sprite-pos(@x,@y);
	
	.hide-text;
	
	background-image: ~"url( @{img}  )"
	
}

.inline-sprite( @img, @w, @h, @x, @y ) {
	
	.inline-mask(@w,@h);
	
	.sprite-pos(@x,@y);
	
	.hide-text;
	
	background-image: ~"url( @{img}  )"
	
}

.isprite( @img, @w, @h, @x, @y ) {
	
	.inline-sprite(@img,@w,@h,@x,@y)
	
}


/**
 * VERTICAL STATES SPRITE
 * usefull for 2 or 3 states buttons when state-related images
 * are disposed vertically 
 */
.vsprite( @img, @w, @h, @x, @y, @y1 ) {
	
	.sprite(@img,@w,@h,@x,@y);
	
	&:hover {
		
		.sprite-pos( @x, @y1 );
		
	}
	
}

.vsprite( @img, @w, @h, @x, @y, @y1, @y2 ) {
	
	.sprite(@img,@w,@h,@x,@y,@y1);
	
	&:active {
		
		.sprite-pos( @x, @y2 );
		
	}
	
}

.sprite( @img, @w, @h, @x, @y, @y1 ) { 			.vsprite(@img,@w,@h,@x,@y,@y1) 		}
.sprite( @img, @w, @h, @x, @y, @y1, @y2 ) { 	.vsprite(@img,@w,@h,@x,@y,@y1,@y2) 	}

/**
 * HORIZONTAL STATES SPRITE
 * usefull for 2 or 3 states buttons when state-related images
 * are disposed horizontally 
 */
.hsprite( @img, @w, @h, @x, @y, @x1 ) {
	
	.sprite(@img,@w,@h,@x,@y);
	
	&:hover {
		
		.sprite-pos( @x1, @y );
		
	}
	
}

.hsprite( @img, @w, @h, @x, @y, @x1, @x2 ) {
	
	.hsprite(@img,@w,@h,@x,@y,@x1);
	
	&:active {
		
		.sprite-pos( @x2, @y );
		
	}
	
}





/**
 * INLINE LIST
 */

.inline-list, .ilist {
	
	margin:				0;
	padding:			0;
	list-style:			none;
	list-style-position:inside;
	
	li { .iblock }
	
}


/**
 * USER-SELECT
 * 
 * Disables selection
 */
.user-select ( @val: none ) {
   -webkit-touch-callout: @val;
   -webkit-user-select: @val;
   -moz-user-select: @val;
   -moz-user-select: ~"-moz-@{val}";
   -khtml-user-select: @val;

   /*
     Introduced in IE 10.
     See http://ie.microsoft.com/testdrive/HTML5/msUserSelect/
   */
   -ms-user-select: @val;
   user-select: @val;
}